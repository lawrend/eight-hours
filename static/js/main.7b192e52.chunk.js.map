{"version":3,"sources":["serviceWorker.js","components/BdayInput.js","components/TodayTime.js","containers/Home.js","components/BirthTime.js","components/DeathTime.js","containers/PresentContainer.js","containers/ResultsDisplay.js","components/ErrorRoute.js","routes.js","App.js","store/reducers/DatesReducer.js","store/reducers/TimesReducer.js","store/reducers/rootReducer.js","store/index.js","index.js"],"names":["Boolean","window","location","hostname","match","props","className","onSubmit","placeholder","onChange","handleChange","value","bday","to","type","id","moment","format","Home","e","setState","target","handleSubmit","preventDefault","state","BdayInput","this","Component","birthtime","diedtime","PresentContainer","TodayTime","ResultsDisplay","calculateBirth","daysAgo","diff","console","log","add","calculateDeath","remainingTime","calculatePercentage","params","month","day","year","BirthTime","DeathTime","style","width","href","Routes","exact","path","component","ErrorRoute","withRouter","App","initialState","startingDate","endingDate","startingTime","endingTime","rootReducer","combineReducers","dates","action","payload","times","store","createStore","composeWithDevTools","applyMiddleware","thunk","createLogger","collapsed","history","createBrowserHistory","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7b192e52.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React  from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default props => (\n  <form className='bday-input-form' onSubmit={props.onSubmit}>\n\n    <label className='bday-input-label'>BIRTHDAY:\n    <input className='bday-input' placeholder=\"mm/dd/yyyy\" onChange={props.handleChange} value={props.bday}/>\n  </label>\n\n  <Link to={`results/${props.bday}` }>\n    <button type=\"submit\" id=\"results-button\">\n    </button>\n  </Link>\n\n</form>\n)\n\n\n\n","import React from 'react';\nimport moment from 'moment';\n\nexport default props => (\n  <div className='today-time'>Now <hr /> {moment().format(\"hh:mm:ss a\")}</div>\n)\n\n","import React, { Component } from 'react';\nimport BdayInput from '../components/BdayInput.js'\nimport TodayTime from '../components/TodayTime.js'\nimport TodayDate from '../components/TodayDate.js'\nimport { Link } from 'react-router-dom';\n\nclass Home extends Component {\nconstructor(props) {\n    super(props)\n    this.state = {\n      bday: '',\n    }\n  }\n\n  handleChange = (e) => {\n    this.setState({bday: e.target.value})\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n  }\n  render() {\n    return (\n      <div className='home'>\n      <BdayInput bday={this.state.bday} onSubmit={this.handleSubmit} handleChange={this.handleChange}/>\n    </div>\n\n      )\n  }\n}\nexport default Home;\n\n","import React from 'react';\n\nexport default props => (\n  <div className='birth-time'>Birth <hr />{props.birthtime}</div>\n)\n","import React from 'react';\n\nexport default props => (\n  <div className='death-time'>Death <hr />{props.diedtime}</div>\n)\n","import React, { Component } from 'react';\n// import moment from 'moment';\nimport TodayDate from '../components/TodayDate';\nimport TodayTime from '../components/TodayTime';\n\nclass PresentContainer extends Component {\n  render() {\n    // let nowish = moment().format('hh:mm:ss a')\n    return (\n      <div className=\"present-container\">\n        <TodayTime />\n      </div>\n    )\n  }\n}\n\nexport default PresentContainer;\n","import React, { Component } from 'react';\nimport BirthTime from '../components/BirthTime.js';\nimport DeathTime from '../components/DeathTime.js';\nimport PresentContainer from './PresentContainer';\n\nimport TodayTime from '../components/TodayTime';\nimport moment from 'moment';\nimport { Link } from 'react-router-dom';\nimport '../css/result.css';\n\nexport default class ResultsDisplay extends Component {\n\n  calculateBirth = (bday) => {\n    const bdayMoment = moment(bday, \"MM/DD/YYYY\");\n    const daysAgo = bdayMoment.diff(moment(), 'days')\n    console.log(\"days ago: \" + daysAgo)\n\n    const birthtime = moment().add(daysAgo, 'seconds').format('h:mm:ss a')\n    return birthtime;\n  }\n\n  calculateDeath = (bday) => {\n    const bdayMoment = moment(bday, \"MM/DD/YYYY\");\n    const daysAgo = bdayMoment.diff(moment(), 'days')\n    const remainingTime = 28800 + daysAgo;\n    const diedtime = moment().add(remainingTime, 'seconds').format(\"h:mm:ss a\")\n    return diedtime;\n  }\n\n  calculatePercentage = (bday) => {\n    const bdayMoment = moment(bday, \"MM/DD/YYYY\");\n    const daysAgo = bdayMoment.diff(moment(), 'days')\n    return -(daysAgo/28880) * 100\n\n  }\n\n\n\n  render() {\n    const bday = this.props.match.params.month + \"/\" + this.props.match.params.day + \"/\" + this.props.match.params.year;\n\n    return (\n      <div>\n      <div className=\"results-display\">\n\n        <div className='flex-container times'>\n\n        <div className='flex-container'>\n          <BirthTime birthtime={this.calculateBirth(bday)} />\n        </div>\n\n        <div className='flex-container'>\n          <PresentContainer bday={bday} />\n        </div>\n\n\n        <div className='flex-container'>\n          <DeathTime diedtime={this.calculateDeath(bday)} />\n        </div>\n      </div>\n\n                <div className=\"meter\">\n          <span className=\"spanner\" style={{width: `${this.calculatePercentage(bday)}%`}}></span>\n        </div>\n\n      </div>\n        <div className='footer'>\n          <Link to={\"/\"}>Home</Link>\n        </div>\n      </div>\n\n      )\n}\n}\n\n","import React from 'react';\n\nexport default props => (\n  <div className='error-route'>\n    <h2>Oops! Can't find what you're looking for</h2>\n    <h3><a href=\"/\">Home</a></h3>\n  </div>\n)\n","// import all relevant pieces of react-router-dom, and all components rendered by routes\nimport React, { Component } from 'react';\nimport { Route, withRouter, Switch } from 'react-router-dom';\nimport Home from './containers/Home.js'\nimport ResultsDisplay from './containers/ResultsDisplay';\nimport ErrorRoute from './components/ErrorRoute';\n\nclass Routes extends Component {\n  render() {\n    return (\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n        <Route path=\"/results/:month/:day/:year\" component={ResultsDisplay} />\n        <Route component={ErrorRoute} />\n      </Switch>\n        )\n}\n};\n\nexport default withRouter(Routes);\n","import React, {Component} from 'react';\nimport Routes from './routes';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>\n            Each Second is a Day\n          </p>\n        </header>\n        <Routes />\n      </div>\n      );\n  }\n}\nexport default App;\n\n","const initialState = {\n  startingDate: 10071990,\n  endingDate: 10072070,\n}\n\nexport default function manageTimes (state = initialState, action) {\n  switch (action.type) {\n    case 'SET_STARTING_TIME':\n      return {...state, startingDate: action.payload}\n    case 'SET_ENDING_TIME':\n      return {...state, endingDate: action.payload}\n    default:\n      return state\n  }\n}\n","const initialState = {\n  startingTime: 900,\n  endingTime: 1700,\n}\n\nexport default function manageTimes (state = initialState, action) {\n  switch (action.type) {\n    case 'SET_STARTING_TIME':\n      return {...state, startingTime: action.payload}\n    case 'SET_ENDING_TIME':\n      return {...state, endingTime: action.payload}\n    default:\n      return state\n  }\n}\n","// COMBINES REDUCERS: imports combineReducers and all reducers to be combined\nimport { combineReducers } from 'redux';\nimport DatesReducer from './DatesReducer';\nimport TimesReducer from './TimesReducer';\n\nexport const rootReducer = combineReducers({\n  dates: DatesReducer,\n  times: TimesReducer,\n}\n);\n\n\n","// CREATES STORE: importing the devtools, createStore, applyMiddleware, rootReducer, and thunk--all to create the store\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport { createStore, applyMiddleware } from 'redux';\nimport { rootReducer } from './reducers/rootReducer.js';\nimport thunk from 'redux-thunk';\nimport { createLogger } from 'redux-logger'\n\nconst store=createStore(\n  rootReducer, composeWithDevTools(applyMiddleware(thunk, createLogger({collapsed: true}))\n  ));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { createBrowserHistory } from 'history';\nimport App from './App';\nimport store from './store/index.js';\n\nconst history = createBrowserHistory();\n\nReactDOM.render(\n\n  <Provider store={store}>\n    <Router history={history}>\n      <App />\n    </Router>\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}